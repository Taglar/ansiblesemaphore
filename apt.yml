---
- hosts: LinuxUbuntu
  become: true
  become_method: sudo
  become_user: root

  vars:
    timestamp_safe: "{{ (ansible_date_time.date ~ '_' ~ ansible_date_time.time) | regex_replace(':','') }}"
    log_diff: "/var/log/config_diffs_{{ timestamp_safe }}.txt"
    log_list: "/var/log/config_changes_{{ timestamp_safe }}.txt"
    backup_dir: "/var/backups/apt_config_{{ timestamp_safe }}"
    critical_paths:
      - "/etc/ssh"
      - "/etc/network"
      - "/etc/netplan"
      - "/etc/hosts"
      - "/etc/hostname"

  tasks:
    - name: Initialisiere Variablen
      set_fact:
        critical_files: []

    - name: Warte auf freie APT-/DPKG-Locks
      wait_for:
        path: "{{ item }}"
        state: absent
        timeout: 300
      loop:
        - /var/lib/dpkg/lock
        - /var/lib/dpkg/lock-frontend
        - /var/lib/apt/lists/lock
      changed_when: false

    - name: Apt-Cache aktualisieren
      apt:
        update_cache: yes
        cache_valid_time: 3600
      register: update_result

    - name: System-Upgrade (vorhandene Konfigurationsdateien behalten)
      apt:
        upgrade: yes
        force_apt_get: yes
        dpkg_options:
          - "--force-confdef"
          - "--force-confold"
      register: upgrade_result

    - name: Nach neuen/alten Konfigurationsdateien suchen
      find:
        paths: "{{ critical_paths + ['/etc'] | unique }}"
        file_type: file
        patterns:
          - "*.dpkg-new"
          - "*.dpkg-dist"
          - "*.ucf-old"
      register: new_configs
      changed_when: false
      failed_when: false

    - name: Verzeichnisse für Backups/Logs anlegen
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ backup_dir }}"
        - "{{ log_diff | dirname }}"
      changed_when: false

    - name: Header für Diff-Log anlegen (wenn Dateien gefunden)
      when: new_configs.matched | int > 0
      copy:
        dest: "{{ log_diff }}"
        content: |
          Vergleich neuer Konfigurationsdateien - {{ ansible_date_time.iso8601 }}
          ------------------------------------------------------------
        owner: root
        group: root
        mode: '0644'

    - name: Header für Liste der neuen Konfigurationsdateien anlegen
      when: new_configs.matched | int > 0
      copy:
        dest: "{{ log_list }}"
        content: |
          Upgrade-Datum: {{ ansible_date_time.iso8601 }}
          ------------------------------------------------------------
        owner: root
        group: root
        mode: '0644'

    - name: Neue Konfigurationsdateien sichern und Diff erstellen
      vars:
        orig: "{{ item.path | regex_replace('\\.dpkg-new$','') | regex_replace('\\.dpkg-dist$','') | regex_replace('\\.ucf-old$','') }}"
        name_sanitized: "{{ item.path | regex_replace('^/','') | regex_replace('/','_') }}"
        orig_sanitized: "{{ orig | regex_replace('^/','') | regex_replace('/','_') }}"
      loop: "{{ new_configs.files | default([]) }}"
      loop_control:
        label: "{{ item.path }}"
      when: new_configs.matched | int > 0
      block:
        - name: Neue Datei sichern
          copy:
            src: "{{ item.path }}"
            dest: "{{ backup_dir }}/new__{{ name_sanitized }}"
            owner: root
            group: root
            mode: '0644'

        - name: Prüfe, ob Original existiert
          stat:
            path: "{{ orig }}"
          register: orig_stat

        - name: Original sichern (falls vorhanden)
          when: orig_stat.stat.exists | default(false)
          copy:
            src: "{{ orig }}"
            dest: "{{ backup_dir }}/orig__{{ orig_sanitized }}"
            owner: root
            group: root
            mode: '0644'

        - name: Diff erstellen (falls Original existiert)
          when: orig_stat.stat.exists | default(false)
          shell: |
            echo "### Diff: {{ orig }} ↔ {{ item.path }}" >> "{{ log_diff }}"
            diff -u "{{ orig }}" "{{ item.path }}" >> "{{ log_diff }}" || true
            echo "" >> "{{ log_diff }}"
          args:
            warn: false
          changed_when: false

        - name: Falls kein Original existiert, im Diff-Log vermerken
          when: not (orig_stat.stat.exists | default(false))
          lineinfile:
            path: "{{ log_diff }}"
            line: "### Keine Originaldatei gefunden für {{ item.path }}"
            create: yes
          changed_when: false

        - name: Datei in Log-Liste aufnehmen
          lineinfile:
            path: "{{ log_list }}"
            line: "{{ item.path }}"
            create: yes
          changed_when: false

        - name: Wenn Datei unter kritischem Pfad liegt, merken
          when: critical_paths | select('search', item.path) | list | length > 0
          set_fact:
            critical_files: "{{ critical_files + [ item.path ] }}"

    - name: Kritische Dateien anzeigen (falls vorhanden)
      debug:
        msg:
          - "Kritische Konfigurationsdateien gefunden: {{ critical_files | default([]) }}"
          - "Backups und Diffs liegen in: {{ backup_dir }}, {{ log_diff }}, {{ log_list }}"
      when: critical_files | length > 0

    - name: Alte Backups älter als 14 Tage löschen
      find:
        paths: /var/backups
        age: 14d
        patterns: "apt_config_*"
      register: old_backups

    - name: Entferne alte Backups
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      when: old_backups.matched | int > 0

    - name: Update-Result anzeigen
      debug:
        var: update_result

    - name: Upgrade-Result anzeigen
      debug:
        var: upgrade_result

    - name: Letzten APT-History-Eintrag anzeigen (aktualisierte Pakete)
      shell: |
        if [ -f /var/log/apt/history.log ]; then
          tac /var/log/apt/history.log | awk '/^Start-Date/{p=1} p; /^End-Date/{exit}' | tac
        else
          echo "Keine APT-History gefunden"
        fi
      register: apt_history
      changed_when: false
      failed_when: false

    - name: APT-History anzeigen
      debug:
        msg: "{{ apt_history.stdout_lines | default(['Keine APT-History gefunden']) }}"
