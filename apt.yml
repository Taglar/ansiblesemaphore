---
- hosts: LinuxUbuntu
  become: true
  become_method: sudo
  become_user: root

  tasks:
    - name: Sicherstellen, dass keine APT-Locks aktiv sind
      shell: |
        echo "Warte auf freie APT-Locks..."
        while fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 1; done
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 1; done
        while fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 1; done
        echo "APT-Locks freigegeben."
      changed_when: false

    - name: Paketlisten aktualisieren
      shell: |
        DEBIAN_FRONTEND=noninteractive apt-get update -y
      register: update_result

    - name: Upgrade mit Sicherung neuer Konfigurationsdateien
      shell: |
        DEBIAN_FRONTEND=noninteractive \
        apt-get -o Dpkg::Options::="--force-confdef" \
                -o Dpkg::Options::="--force-confnew" \
                upgrade -y
      register: upgrade_result

    - name: Nach neuen oder geänderten Konfigurationsdateien suchen
      shell: |
        find /etc -type f \( -name "*.dpkg-new" -o -name "*.dpkg-dist" -o -name "*.ucf-old" \) 2>/dev/null
      register: new_configs
      changed_when: false
      failed_when: false

    - name: Liste der neuen Konfigurationen anzeigen
      debug:
        msg: "{{ new_configs.stdout_lines | default(['Keine neuen Konfigurationsdateien gefunden']) }}"

    - name: Diff-Vergleich für neue Konfigurationsdateien durchführen
      shell: |
        LOGFILE="/var/log/config_diffs_{{ ansible_date_time.date }}_{{ ansible_date_time.time }}.txt"
        echo "Vergleich neuer Konfigurationsdateien - {{ ansible_date_time.iso8601 }}" > "$LOGFILE"
        echo "------------------------------------------------------------" >> "$LOGFILE"
        {% for file in new_configs.stdout_lines %}
        ORIG="{{ file | regex_replace('\\.dpkg-new$', '') | regex_replace('\\.dpkg-dist$', '') | regex_replace('\\.ucf-old$', '') }}"
        if [ -f "$ORIG" ]; then
          echo "### Diff: $ORIG ↔ {{ file }}" >> "$LOGFILE"
          diff -u "$ORIG" "{{ file }}" >> "$LOGFILE" || true
          echo "" >> "$LOGFILE"
        else
          echo "### Keine Originaldatei gefunden für {{ file }}" >> "$LOGFILE"
        fi
        {% endfor %}
      when: new_configs.stdout_lines | length > 0
      changed_when: false

    - name: Liste der neuen Konfigurationen sichern
      copy:
        dest: "/var/log/config_changes_{{ ansible_date_time.date }}_{{ ansible_date_time.time }}.txt"
        content: |
          Upgrade-Datum: {{ ansible_date_time.iso8601 }}
          ------------------------------------------------------------
          {% if new_configs.stdout_lines %}
          {% for line in new_configs.stdout_lines %}
          {{ line }}
          {% endfor %}
          {% else %}
          Keine neuen oder geänderten Konfigurationsdateien gefunden.
          {% endif %}
      when: new_configs.stdout_lines | length > 0

    - name: Ergebnis - Paketlisten aktualisieren
      debug:
        var: update_result.stdout_lines

    - name: Ergebnis - Upgrade
      debug:
        var: upgrade_result.stdout_lines

    - name: Letzten APT-History-Eintrag anzeigen (aktualisierte Pakete)
      shell: |
        echo "=== Letzte APT-Operation ==="
        tac /var/log/apt/history.log | awk '/^Start-Date/{p=1} p; /^End-Date/{exit}' | tac
      register: apt_history
      changed_when: false
      failed_when: false

    - name: APT-History anzeigen
      debug:
        msg: "{{ apt_history.stdout_lines | default(['Keine APT-History gefunden']) }}"
