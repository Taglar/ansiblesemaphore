---
- hosts: LinuxUbuntu
  become: true
  become_method: sudo
  become_user: root

  vars:
    timestamp_safe: "{{ (ansible_date_time.date ~ '_' ~ ansible_date_time.time) | regex_replace(':','') }}"
    log_diff: "/var/log/config_diffs_{{ timestamp_safe }}.txt"
    log_list: "/var/log/config_changes_{{ timestamp_safe }}.txt"
    backup_dir: "/var/backups/apt_config_{{ timestamp_safe }}"
    critical_paths:
      - "/etc/ssh"
      - "/etc/network"
      - "/etc/netplan"
      - "/etc/hosts"
      - "/etc/hostname"

  tasks:
    - name: Initialisiere Variablen
      set_fact:
        critical_files: []

    # Robuste Lock-Prüfung (POSIX /bin/sh-kompatibel, ohne Bash-Arrays)
    - name: Prüfe und warte auf freie APT-/DPKG-Locks
      ansible.builtin.shell: |
        for LOCK in /var/lib/dpkg/lock /var/lib/dpkg/lock-frontend /var/lib/apt/lists/lock; do
          if [ -e "$LOCK" ]; then
            if fuser "$LOCK" >/dev/null 2>&1; then
              echo "APT-Lock aktiv auf $LOCK – warte..."
              ATTEMPTS=0
              while [ "$ATTEMPTS" -lt 30 ]; do
                sleep 10
                if ! fuser "$LOCK" >/dev/null 2>&1; then
                  echo "$LOCK wurde freigegeben"
                  break
                fi
                ATTEMPTS=$((ATTEMPTS+1))
              done
              if [ "$ATTEMPTS" -eq 30 ]; then
                echo "Timeout: Lock $LOCK nach 5 Minuten immer noch aktiv."
                exit 1
              fi
            else
              echo "Kein Prozess für $LOCK gefunden – entferne verwaiste Lock-Datei."
              rm -f "$LOCK"
            fi
          fi
        done
      register: lock_check
      changed_when: false
      failed_when: lock_check.rc != 0

    - name: Stelle sicher, dass psmisc (fuser) vorhanden ist
      ansible.builtin.apt:
        name: psmisc
        state: present
        update_cache: false

    - name: Paketquellen aktualisieren
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      register: update_result

    - name: Upgrade ausführen (bestehende Konfigurationen behalten)
      ansible.builtin.apt:
        upgrade: yes
        force_apt_get: yes
        dpkg_options:
          - "--force-confdef"
          - "--force-confold"
      register: upgrade_result

    - name: Nach neuen/alten Konfigurationsdateien suchen
      ansible.builtin.find:
        paths: "{{ critical_paths + ['/etc'] | unique }}"
        file_type: file
        patterns:
          - "*.dpkg-new"
          - "*.dpkg-dist"
          - "*.ucf-old"
      register: new_configs
      changed_when: false
      failed_when: false

    - name: Verzeichnisse für Backups/Logs anlegen
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ backup_dir }}"
        - "{{ log_diff | dirname }}"
      changed_when: false

    - name: Header für Diff-Log anlegen (wenn Dateien gefunden)
      when: new_configs.matched | int > 0
      ansible.builtin.copy:
        dest: "{{ log_diff }}"
        content: |
          Vergleich neuer Konfigurationsdateien – {{ ansible_date_time.iso8601 }}
          ------------------------------------------------------------
        owner: root
        group: root
        mode: '0644'

    - name: Header für Liste der neuen Konfigurationsdateien anlegen
      when: new_configs.matched | int > 0
      ansible.builtin.copy:
        dest: "{{ log_list }}"
        content: |
          Upgrade-Datum: {{ ansible_date_time.iso8601 }}
          ------------------------------------------------------------
        owner: root
        group: root
        mode: '0644'

    - name: Neue Dateien sichern
      ansible.builtin.copy:
        remote_src: true
        src: "{{ item.path }}"
        dest: "{{ backup_dir }}/new__{{ item.path | regex_replace('^/','') | regex_replace('/','_') }}"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ new_configs.files | default([]) }}"
      when: new_configs.matched | int > 0

    - name: Prüfe, ob Originaldateien existieren
      ansible.builtin.stat:
        path: "{{ item.path | regex_replace('\\.dpkg-new$','') | regex_replace('\\.dpkg-dist$','') | regex_replace('\\.ucf-old$','') }}"
      loop: "{{ new_configs.files | default([]) }}"
      register: orig_stat_list
      when: new_configs.matched | int > 0

    - name: Originaldateien sichern (falls vorhanden)
      ansible.builtin.copy:
        remote_src: true
        src: "{{ item.item.path | regex_replace('\\.dpkg-new$','') | regex_replace('\\.dpkg-dist$','') | regex_replace('\\.ucf-old$','') }}"
        dest: "{{ backup_dir }}/orig__{{ item.item.path | regex_replace('^/','') | regex_replace('/','_') }}"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ orig_stat_list.results | selectattr('stat.exists', 'defined') | selectattr('stat.exists') | list }}"
      when: new_configs.matched | int > 0

    - name: Diff-Logs erstellen
      ansible.builtin.shell: |
        orig="{{ item.path | regex_replace('\\.dpkg-new$','') | regex_replace('\\.dpkg-dist$','') | regex_replace('\\.ucf-old$','') }}"
        if [ -f "$orig" ]; then
          echo "### Diff: $orig ↔ {{ item.path }}" >> "{{ log_diff }}"
          diff -u "$orig" "{{ item.path }}" >> "{{ log_diff }}" || true
          echo "" >> "{{ log_diff }}"
        else
          echo "### Keine Originaldatei gefunden für {{ item.path }}" >> "{{ log_diff }}"
        fi
      args:
        warn: false
      loop: "{{ new_configs.files | default([]) }}"
      changed_when: false
      when: new_configs.matched | int > 0

    - name: Neue Dateien in Logliste eintragen
      ansible.builtin.lineinfile:
        path: "{{ log_list }}"
        line: "{{ item.path }}"
        create: yes
      loop: "{{ new_configs.files | default([]) }}"
      changed_when: false
      when: new_configs.matched | int > 0

    - name: Kritische Dateien erkennen
      ansible.builtin.set_fact:
        critical_files: "{{ critical_files + [ item.path ] }}"
      when: critical_paths | select('search', item.path) | list | length > 0
      loop: "{{ new_configs.files | default([]) }}"
      changed_when: false

    - name: Kritische Dateien anzeigen
      ansible.builtin.debug:
        msg:
          - "Kritische Konfigurationsdateien gefunden: {{ critical_files | default([]) }}"
          - "Backups und Diffs liegen in: {{ backup_dir }}, {{ log_diff }}, {{ log_list }}"
      when: critical_files | length > 0

    - name: Alte Backups älter als 14 Tage löschen
      ansible.builtin.find:
        paths: /var/backups
        age: 14d
        patterns: "apt_config_*"
      register: old_backups

    - name: Entferne alte Backups
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      when: old_backups.matched | int > 0

    - name: APT-Update-Ergebnis anzeigen
      ansible.builtin.debug:
        var: update_result

    - name: APT-Upgrade-Ergebnis anzeigen
      ansible.builtin.debug:
        var: upgrade_result

    - name: Letzten APT-History-Eintrag anzeigen
      ansible.builtin.shell: |
        if [ -f /var/log/apt/history.log ]; then
          tac /var/log/apt/history.log | awk '/^Start-Date/{p=1} p; /^End-Date/{exit}' | tac
        else
          echo "Keine APT-History gefunden"
        fi
      args:
        warn: false
      register: apt_history
      changed_when: false
      failed_when: false

    - name: APT-History ausgeben
      ansible.builtin.debug:
        msg: "{{ apt_history.stdout_lines | default(['Keine APT-History gefunden']) }}"
